shuffle = ["0_025","0_05","0_1","0_2"]

#data = ["sim_"+str(s) for s in clones]

constraints:  r = "0_\d+"


rule_all: #expand(OUTPUT+ "{d}/{s}/all_PTP.PTPhSupportPartition.txt.png", d=data, s=shm)
        #expand(OUTPUT + "{d}/{s}/combined/", d=data, s=shm)
        #expand(OUTPUT + "{d}/tree_files/", d=data),
        #expand(OUTPUT + "{d}/germline_search/partition_0/germline.fasta", d=data)

############################ 
#simulate from existing data
#rule tsv_to_fasta:
#    resources:
#        mem="10G",
#    threads: 2
#    log: os.path.join(DATADIR, "logs", "tsv_to_fasta_{d}.log")
#    input:
#        tsv = DATADIR+"{d}/airr-covid-19.tsv", 
#        script = 'Download_data/tsv_to_fasta.py',
#    output:
#        fasta= OUTPUT + "{d}.fasta"
#    shell:
#        "echo " + platform.node() + " &>> {log} && \
#        python {input.script} -i {input.tsv} -o {output.fasta} &&>> {log}"



#cache_parameters partis
#rule cache_parameters:
#    resources:
#        mem="20G",
#    threads: 10
#    log: os.path.join(DATADIR, "logs", "cache_parameters_{d}.log")
#    input:
#        fasta = OUTPUT + "{d}.fasta",
#        script = 'partis/partis_simulation/cache_parameters.sh',
 #       partis = PARTIS+"bin/partis"
 #   output:
 #       out = directory(OUTPUT + "{d}/")
 #   shell:
 #       "module purge &>> {log} && \
 #       module load gcc/8.3.0 &>> {log} && \
 #       module load gsl/2.5 &>> {log} && \
 #       module load git &>> {log} && \
 #       export PATH=/home1/kavoss/anaconda2/bin:$PATH &>> {log} && \
 #       echo " + platform.node() + " &>> {log} && \
 #       mkdir {output.out} &>> {log} && \
 #       sh {input.script} -f {input.fasta} -p {input.partis} -o {output.out} &>> {log}"

#partition partis
#rule partition:
#    resources:
#        mem_mb="100G",
#	mem="180G",
#    threads: 100
#    log: os.path.join(DATADIR, "logs", "partition_{d}.log")
#    input:
#        fasta = OUTPUT + "{d}.fasta",
#        script = 'partis/partis_simulation/partition.sh',
#        partis = HAMPARTIS+"bin/partis",
#        out = OUTPUT + "{d}/"
#    output:
#        out= OUTPUT + "{d}/pd.yaml"
#    shell:
#        "module purge &>> {log} && \
#        module load gcc/8.3.0 &>> {log} && \
#        module load gsl/2.5 &>> {log} && \
#        module load git &>> {log} && \
#        export PATH=/home1/kavoss/anaconda2/bin:$PATH &>> {log} && \
#        echo " + platform.node() + " &>> {log} && \
#        sh {input.script} -f {input.fasta} -p {input.partis} -o {input.out} &>> {log}"



rule shuffle_sequences:
     resources:
        mem="50G",
     threads: 10
     log: os.path.join(OUTPUT, "logs", "shuffle_sequences_{d}_{s}_{r}.log")
     input:
        script = 'resampling/resample_families.R',
        fasta = OUTPUT + "{d}/{s}/all.fasta"
     params:
         shuffle_rate = "{r}",
         out = OUTPUT + "{d}/{s}/{r}/"
     output:
         all = OUTPUT + "{d}/{s}/{r}/family_1.fasta",
     shell:
        "echo " + platform.node() + " &>> {log} && \
        export PATH=/home1/kavoss/anaconda2/bin:$PATH &>> {log}&& \
        mkdir -p {params.out} &>> {log}&& \
        Rscript {input.script} -f {input.fasta} -o {params.out} -s {params.shuffle_rate} &>> {log}"


rule align_shuffled:
     resources:
        mem="50G",
     threads: 10
     log: os.path.join(OUTPUT, "logs", "align_shuffled{d}_{s}_{r}.log")
     input:
        all = OUTPUT + "{d}/{s}/{r}/family_1.fasta",
        script = 'tree_building/align_partitions.sh'
     params:
         out = OUTPUT + "{d}/{s}/{r}"
     output:
        align_fam = OUTPUT + "{d}/{s}/{r}/family_1_aligned.fasta"
     shell:
        "echo " + platform.node() + " &>> {log} && \
        sh {input.script} -d {params.out} &>> {log}"

rule build_tree_shuffled:
     resources:
        mem="200G",
     threads: 100
     log: os.path.join(OUTPUT, "logs", "build_tree_shuffled_{d}_{s}_{r}.log")
     input:
        script = 'tree_building/build_tree.sh',
        raxml  = RAXML+"raxml-ng",
        align_check = OUTPUT + "{d}/{s}/{r}/family_1_aligned.fasta"
     params:
         out = OUTPUT + "{d}/{s}/{r}"
     output:
        out = directory(OUTPUT + "{d}/{s}/{r}/tree_files/")
     shell:
        "echo " + platform.node() + " &>> {log} && \
        mkdir -p {output.out} &>> {log}&& \
        sh {input.script} -r {input.raxml} -d {params.out} -o {output.out} &>> {log}"

rule ancestral_sequence_shuffled:
     resources:
        mem="150G",
     threads: 10
     log: os.path.join(OUTPUT, "logs", "ancestral_sequence_shuffled_{d}_{s}_{r}.log")
     input:
        script = 'germline_search/ancestral_seq_raxml.sh',
        raxml  = RAXML+"raxml-ng",
        trees = OUTPUT + "{d}/{s}/{r}/tree_files/",
        alignment = OUTPUT + "{d}/{s}/{r}/family_1_aligned.fasta"
     params:
         out = OUTPUT + "{d}/{s}/{r}/"
     output:
        out = directory(OUTPUT + "{d}/{s}/{r}/ancestral_sequences/"),
        all_naive = OUTPUT + "{d}/{s}/{r}/ancestral_sequences/root_naive.txt"
     shell:
        "echo " + platform.node() + " &>> {log} && \
        export PATH=/home1/kavoss/anaconda2/bin:$PATH &>> {log}&& \
        sh {input.script} -r {input.raxml} -d {params.out} -o {output.out} &>> {log}"


rule findVDJ:
     resources:
        mem="10G",
     threads: 10
     log: os.path.join(OUTPUT, "logs", "findVDJ_{d}.log")
     input:
        dir = OUTPUT + "{d}/partitions/",
        script = 'germline_search/IMGT_vrequest.sh',
        vquest = VQUEST,
        partition_check = OUTPUT + "{d}/partitions/sim_5_partition_0.fasta"
     output:
        out = directory(OUTPUT + "{d}/germline_search/"),
        dir_check = directory(OUTPUT + "{d}/germline_search/sim_5_partition_0"),
        seq = OUTPUT + "{d}/germline_search/sim_5_partition_0/3_Nt-sequences.txt"
     shell:
        "echo " + platform.node() + " &>> {log} && \
        sh {input.script} -d {input.dir} -v {input.vquest} -o {output.out} &>> {log}"

rule find_germline:
     resources:
        mem="10G",
     threads: 10
     log: os.path.join(OUTPUT, "logs", "find_germline{d}.log")
     input:
        dir = OUTPUT + "{d}/germline_search/",
        script = 'germline_search/find_germline_RevertToGermline.sh',
        RevertToGermline = RTG,
        seq_check = OUTPUT + "{d}/germline_search/sim_5_partition_0/3_Nt-sequences.txt"
     output:
        seq = OUTPUT + "{d}/germline_search/sim_5_partition_0/germline.fasta"
     shell:
        "echo " + platform.node() + " &>> {log} && \
        export PATH=/home1/kavoss/anaconda2/bin:$PATH &>> {log} && \
        sh {input.script} -d {input.dir} -r {input.RevertToGermline} -o {input.dir} &>> {log}"


rule ancestral_sequence:
     resources:
        mem="150G",
     threads: 10
     log: os.path.join(OUTPUT, "logs", "ancestral_sequence_{d}_{s}.log")
     input:
        script = 'germline_search/ancestral_seq_raxml.sh',
        raxml  = RAXML+"raxml-ng",
        tree = OUTPUT + "{d}/{s}/tree_files/all_tree_.raxml.bestTree",
        alignment = OUTPUT + "{d}/{s}/family_1_aligned.fasta"
     params:
         out = OUTPUT + "{d}/{s}/"
     output:
        out = directory(OUTPUT + "{d}/{s}/ancestral_sequences/"),
        all_naive = OUTPUT + "{d}/{s}/ancestral_sequences/root_naive.txt"
     shell:
        "echo " + platform.node() + " &>> {log} && \
        export PATH=/home1/kavoss/anaconda2/bin:$PATH &>> {log}&& \
        sh {input.script} -r {input.raxml} -d {params.out} -o {output.out} &>> {log}"





