##### Code to simulate sequences #####
## simulate sequences in partis
## partis is run through Docker (see partis instructions for how to install:
## https://github.com/psathyrella/partis/blob/master/docs/install.md)

## after install, run docker:
docker exec -it container_name bash 

########## Partis Original ##########


##### Step 1: Parameter directory ####

## creating parameter directory from a fasta file 
## download a set of sequences from iReceptor, we are using COVID-19 data
## convert the tsv file to fasta using tsv_to_fasta.py so the input
## for cache-parameters is a fasta file

bin/partis cache-parameters --infname name.fasta  --parameter-dir folder_name 

# partition the fasta file used in cache-parameters to create multi-hmm folder in the parameter directory
bin/partis partition --infname name.fasta --outfname name_pd.yaml --parameter-dir folder_name --count-parameters

# name_pd.yaml is different from the output file generated during partitioning a file 



##### Step 2: Simulate Sequences #####

## simulate and rearrange from scratch:
bin/partis simulate --parameter-dir folder_name --n-sim-events integer --outfname name.yaml 
# not using n-leaves because it's using the distribution from parameter directory

## many parameter options: can pass a parameter-dir OR simulate-from-scratch
## some parameter examples:
# n-leaves is the mean number of leaves
# constant-number-of-leaves forces leaves to be equal
# indel-frequency is the number of sequences with indels (0.02 or 0.03, see:
https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1007977)
# n-indels-per-indeld-seq is the number of indels the sequences have (1:2)
# mean-indel-length is the length of the indel (1)



##### Step 3: Partition Sequences into Clonal Families #####

# partition the simulated sequences into families
bin/partis partition --infname name.yaml --outfname name2.yaml

# view families
bin/partis view-output --outfname name2.yaml



#########################################################################################################################



########## Partis Second Version ##########
# run the simulation on Docker
# code files are in a folder called python_test
# change the input for n-sim-events, n-leaves, and shm-freq
 
# autosimulator function
python python_test/autosimulator2.py --species human --n-procs 1 --yaml-folder run_1_yaml --n-sim-events 5 --n-leaves 5 --fasta-folder run_1_fasta --shm-freq 0.05 --generate-germline 

# move the yaml files from the sub folders in run_1_yaml into a separate folder called run_yaml (there should be no subfolders)

# partition function
# change the n-max-final-cluster and n-partitions-to-write (default is 10 but it may write less)
python python_test/auto_partition.py --n-procs 1 --n-max-final-cluster <input value> --n-partitions-to-write  <input value> --input-folder run_yaml --output-folder run_parition  --is-simu
 
# partition summarizer function
python python_test/partition_summarizer.py --input-folder run_parition --outfname run_summarizer --is-simu


